// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  firstName          String
  lastName           String
  email              String               @unique
  password           String
  role               UserRole             @default(USER)
  token              String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  Page               Page[]
  UserProfile        UserProfile[]
  Education          Education[]
  PlatformConnection PlatformConnection[]
  Experience         Experience[]
  Project            Project[]
  Service            Service[]
  SkillConnection    SkillConnection[]
  JobPost            JobPost[]
}

model UserProfile {
  userId             String
  user               User                 @relation(fields: [userId], references: [id])
  image              String
  dateOfBirth        String
  maritualStatus     String
  about              String
  nationality        String
  location           String
  Education          Education[]
  PlatformConnection PlatformConnection[]
  Experience         Experience[]
  Project            Project[]
  Service            Service[]
  SkillConnection    SkillConnection[]

  @@id([userId])
}

model Education {
  id                String       @id @default(uuid())
  title             String
  user              User         @relation(fields: [userId], references: [id])
  userId            String
  instituteName     String
  startDate         DateTime
  endDate           DateTime
  cgpa              Int
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  UserProfile       UserProfile? @relation(fields: [userProfileUserId], references: [userId])
  userProfileUserId String?
}

model SocialPlatform {
  id                 String               @id @default(uuid())
  name               String
  image              String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  PlatformConnection PlatformConnection[]
}

model PlatformConnection {
  id                String         @id @default(uuid())
  socialPlatform    SocialPlatform @relation(fields: [platformId], references: [id])
  platformId        String
  link              String
  user              User           @relation(fields: [userId], references: [id])
  userId            String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  UserProfile       UserProfile?   @relation(fields: [userProfileUserId], references: [userId])
  userProfileUserId String?
}

model Experience {
  id                String       @id @default(uuid())
  companyName       String
  designation       String
  startYear         DateTime
  present           String
  endYear           DateTime
  user              User         @relation(fields: [userId], references: [id])
  userId            String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  UserProfile       UserProfile? @relation(fields: [userProfileUserId], references: [userId])
  userProfileUserId String?
}

model Project {
  id                 String               @id @default(uuid())
  designation        String
  projectLink        String
  image              String
  description        String
  startYear          DateTime
  endYear            DateTime
  user               User                 @relation(fields: [userId], references: [id])
  userId             String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  CategoryConnection CategoryConnection[]
  UserProfile        UserProfile?         @relation(fields: [userProfileUserId], references: [userId])
  userProfileUserId  String?
}

model Category {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  JobPost   JobPost[]
}

model CategoryConnection {
  id         String   @id @default(uuid())
  categoryId String
  service    Service  @relation(fields: [serviceId], references: [id])
  serviceId  String
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model SubCategory {
  id         String   @id @default(uuid())
  name       String
  categoryId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Service {
  id                 String               @id @default(uuid())
  title              String
  description        String
  image              String
  user               User                 @relation(fields: [userId], references: [id])
  userId             String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  CategoryConnection CategoryConnection[]
  UserProfile        UserProfile?         @relation(fields: [userProfileUserId], references: [userId])
  userProfileUserId  String?
}

model Skills {
  id              String            @id @default(uuid())
  name            String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  SkillConnection SkillConnection[]
}

model SkillConnection {
  id                String       @id @default(uuid())
  skills            Skills       @relation(fields: [skillId], references: [id])
  skillId           String
  user              User         @relation(fields: [userId], references: [id])
  userId            String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  UserProfile       UserProfile? @relation(fields: [userProfileUserId], references: [userId])
  userProfileUserId String?
}

// company
model Page {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  logo        String?
  coverPic    String?
  title       String    @unique
  bio         String?
  description String
  location    Location  @relation(fields: [locationId], references: [id])
  locationId  String
  address     String
  contactNo   String
  email       String    @unique
  follower    String    @default("0")
  websiteURL  String?
  foundedDate DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  JobPost     JobPost[]
  Blog        Blog[]
}

model JobPost {
  id                    String          @id @default(uuid())
  userId                String?
  pageId                String?
  title                 String
  minSalary             Int
  maxSalary             Int
  salaryType            SalaryType      @default(Monthly)
  currency              String
  workEnvironment       WorkEnvoirement @default(Onsite)
  experienceLevel       ExperienceLevel @default(Junior)
  jobType               JobType         @default(FullTime)
  minimumExperienceYear String
  maximumExperienceYear String
  description           String
  responsibility        String
  requirements          String
  vacancy               String
  deadline              DateTime
  category              Category        @relation(fields: [categoryId], references: [id])
  categoryId            String
  extraInfo             String
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  user                  User?           @relation(fields: [userId], references: [id])
  page                  Page?           @relation(fields: [pageId], references: [id])
}

model Blog {
  id          String   @id @default(uuid())
  title       String
  description String
  image       String
  page        Page     @relation(fields: [pageId], references: [id])
  pageId      String
  upVote      String
  downVote    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Location {
  id       String @id @default(uuid())
  country  String
  division String
  district String
  Page     Page[]
}

model Member {
  id          String   @id @default(uuid())
  email       String   @unique
  joiningDate DateTime
  role        String
  pageId      String
}

enum UserRole {
  SUPER_ADMIN
  USER
}

enum WorkEnvoirement {
  Remote
  Onsite
  Hybrid
  Relocate
}

enum ExperienceLevel {
  Internship
  Junior
  MidSenior
  Senior
}

enum JobType {
  FullTime
  PartTime
  Contract
}

enum SalaryType {
  Monthly
  Yearly
}
