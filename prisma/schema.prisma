// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  firstName   String
  lastName    String
  email       String        @unique
  password    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  UserProfile UserProfile[]
}

model UserProfile {
  id                 String               @id @default(uuid())
  userId             String
  user               User                 @relation(fields: [userId], references: [id])
  image              String
  dateOfBirth        String
  maritualStatus     String
  about              String
  nationality        String
  location           String
  Education          Education[]
  PlatformConnection PlatformConnection[]
  Experience         Experience[]
  Project            Project[]
  Service            Service[]
  SkillConnection    SkillConnection[]
}

model Education {
  id            String      @id @default(uuid())
  title         String
  user          UserProfile @relation(fields: [userId], references: [id])
  userId        String
  instituteName String
  startDate     DateTime
  endDate       DateTime
  cgpa          Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model SocialPlatform {
  id                 String               @id @default(uuid())
  name               String
  image              String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  PlatformConnection PlatformConnection[]
}

model PlatformConnection {
  id             String         @id @default(uuid())
  socialPlatform SocialPlatform @relation(fields: [platformId], references: [id])
  platformId     String
  link           String
  user           UserProfile    @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Experience {
  id          String      @id @default(uuid())
  companyName String
  designation String
  startYear   DateTime
  present     String
  endYear     DateTime
  user        UserProfile @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Project {
  id          String      @id @default(uuid())
  designation String
  projectLink String
  image       String
  description String
  startYear   DateTime
  endYear     DateTime
  user        UserProfile @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CategoryConnection {
  id         String   @id @default(uuid())
  categoryId String
  serviceId  String
  projectId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model SubCategory {
  id         String   @id @default(uuid())
  name       String
  categoryId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Service {
  id          String      @id @default(uuid())
  title       String
  description String
  image       String
  user        UserProfile @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Skills {
  id              String            @id @default(uuid())
  name            String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  SkillConnection SkillConnection[]
}

model SkillConnection {
  id        String      @id @default(uuid())
  skills    Skills      @relation(fields: [skillId], references: [id])
  skillId   String
  user      UserProfile @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

// company
model Page {
  id          String   @id @default(uuid())
  userId      String
  logo        String
  coverPic    String
  name        String
  userName    String
  bio         String
  description String
  locationId  String
  address     String
  categoryId  String
  contactNo   String
  email       String   @unique
  follower    String
  websiteURL  String
  foundedDate DateTime
}

model JobPost {
  id             String   @id @default(uuid())
  pageId         String
  title          String
  salary         Int
  description    String
  responsibility String
  requirements   String
  vacancy        String
  deadline       DateTime
  categoryId     String
  extraInfo      String
}

model Blog {
  id          String   @id @default(uuid())
  title       String
  description String
  image       String
  pageId      String
  upVote      String
  downVote    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Location {
  id       String @id @default(uuid())
  country  String
  division String
  district String
}

model Member {
  id          String   @id @default(uuid())
  email       String   @unique
  joiningDate DateTime
  role        String
  pageId      String
}
